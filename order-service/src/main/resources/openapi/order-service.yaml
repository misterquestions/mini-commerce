openapi: 3.0.3
info:
  title: Mini-Commerce Order Service
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /api/v1/orders:
    post:
      summary: Create an order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI of the created order
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    get:
      summary: List orders
      operationId: listOrders
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [created, paid, fulfilled, cancelled, refunded] }
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      responses:
        '200':
          description: Page of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOrderResponse'
  /api/v1/orders/{id}:
    get:
      summary: Get order by id
      operationId: getOrder
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: The order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/orders/{id}/cancel:
    patch:
      summary: Cancel an order
      operationId: cancelOrder
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Cancelled order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '409':
          description: Invalid state transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/outbox/requeue-failed:
    post:
      tags: [Outbox]
      summary: Requeue all FAILED outbox events
      operationId: requeueFailedOutboxEvents
      responses:
        '200':
          description: Count of requeued events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequeueFailedResponse'
  /api/v1/outbox/{id}/requeue:
    post:
      tags: [Outbox]
      summary: Requeue a single FAILED outbox event by id
      operationId: requeueSingleOutboxEvent
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Event requeued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequeueSingleResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    CreateOrderRequest:
      type: object
      required: [customerId, currency, items]
      properties:
        customerId: { type: string, format: uuid }
        currency: { type: string, minLength: 3, maxLength: 3, example: USD }
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemRequest'
    OrderItemRequest:
      type: object
      required: [sku, name, quantity, unitPrice]
      properties:
        sku: { type: string }
        name: { type: string }
        quantity: { type: integer, minimum: 1 }
        unitPrice: { type: number, format: double, minimum: 0 }
    OrderResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        customerId: { type: string, format: uuid }
        status: { type: string, enum: [created, paid, fulfilled, cancelled, refunded] }
        currency: { type: string }
        total: { type: number, format: double }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
    OrderItemResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        sku: { type: string }
        name: { type: string }
        quantity: { type: integer }
        unitPrice: { type: number, format: double }
        lineTotal: { type: number, format: double }
    ApiError:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        status: { type: integer }
        error: { type: string }
        message: { type: string }
        path: { type: string }
    PageOrderResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        page: { type: integer }
        size: { type: integer }
        totalElements: { type: integer }
        totalPages: { type: integer }
    RequeueFailedResponse:
      type: object
      properties:
        requeued: { type: integer, minimum: 0 }
    RequeueSingleResponse:
      type: object
      properties:
        requeued: { type: string, format: uuid }
